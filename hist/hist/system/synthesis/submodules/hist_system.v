// (C) 1992-2018 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 

// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 18.1.0 Build 625 Standard Edition, Copyright (C) 2018 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE hist_system
/////////////////////////////////////////////////////////////////
module hist_system
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   // AVS avs_histogram_cra
   input logic avs_histogram_cra_enable,
   input logic avs_histogram_cra_read,
   input logic avs_histogram_cra_write,
   input logic [3:0] avs_histogram_cra_address,
   input logic [63:0] avs_histogram_cra_writedata,
   input logic [7:0] avs_histogram_cra_byteenable,
   output logic [63:0] avs_histogram_cra_readdata,
   output logic avs_histogram_cra_readdatavalid,
   output logic kernel_irq,
   // AVM avm_mem_gmem0_port_0_0_rw
   output logic avm_mem_gmem0_port_0_0_rw_enable,
   output logic avm_mem_gmem0_port_0_0_rw_read,
   output logic avm_mem_gmem0_port_0_0_rw_write,
   output logic [4:0] avm_mem_gmem0_port_0_0_rw_burstcount,
   output logic [29:0] avm_mem_gmem0_port_0_0_rw_address,
   output logic [255:0] avm_mem_gmem0_port_0_0_rw_writedata,
   output logic [31:0] avm_mem_gmem0_port_0_0_rw_byteenable,
   input logic avm_mem_gmem0_port_0_0_rw_waitrequest,
   input logic [255:0] avm_mem_gmem0_port_0_0_rw_readdata,
   input logic avm_mem_gmem0_port_0_0_rw_readdatavalid,
   input logic avm_mem_gmem0_port_0_0_rw_writeack
);
   logic kernel_irqs;
   logic gmem0_global_avm_enable [2];
   logic gmem0_global_avm_read [2];
   logic gmem0_global_avm_write [2];
   logic [4:0] gmem0_global_avm_burstcount [2];
   logic [29:0] gmem0_global_avm_address [2];
   logic [255:0] gmem0_global_avm_writedata [2];
   logic [31:0] gmem0_global_avm_byteenable [2];
   logic gmem0_global_avm_waitrequest [2];
   logic [255:0] gmem0_global_avm_readdata [2];
   logic gmem0_global_avm_readdatavalid [2];
   logic gmem0_global_avm_writeack [2];

   // INST histogram_std_ic_inst of histogram_std_ic_partition_wrapper
   histogram_std_ic_partition_wrapper histogram_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_histogram(kernel_irqs),
      // AVS avs_histogram_cra
      .avs_histogram_cra_enable(avs_histogram_cra_enable),
      .avs_histogram_cra_read(avs_histogram_cra_read),
      .avs_histogram_cra_write(avs_histogram_cra_write),
      .avs_histogram_cra_address(avs_histogram_cra_address),
      .avs_histogram_cra_writedata(avs_histogram_cra_writedata),
      .avs_histogram_cra_byteenable(avs_histogram_cra_byteenable),
      .avs_histogram_cra_readdata(avs_histogram_cra_readdata),
      .avs_histogram_cra_readdatavalid(avs_histogram_cra_readdatavalid),
      // AVM histogram_0_avm_call36
      .histogram_0_avm_call36_enable(gmem0_global_avm_enable[0]),
      .histogram_0_avm_call36_read(gmem0_global_avm_read[0]),
      .histogram_0_avm_call36_write(gmem0_global_avm_write[0]),
      .histogram_0_avm_call36_burstcount(gmem0_global_avm_burstcount[0]),
      .histogram_0_avm_call36_address(gmem0_global_avm_address[0]),
      .histogram_0_avm_call36_writedata(gmem0_global_avm_writedata[0]),
      .histogram_0_avm_call36_byteenable(gmem0_global_avm_byteenable[0]),
      .histogram_0_avm_call36_waitrequest(gmem0_global_avm_waitrequest[0]),
      .histogram_0_avm_call36_readdata(gmem0_global_avm_readdata[0]),
      .histogram_0_avm_call36_readdatavalid(gmem0_global_avm_readdatavalid[0]),
      .histogram_0_avm_call36_writeack(gmem0_global_avm_writeack[0]),
      // AVM histogram_0_avm_unnamed_histogram3
      .histogram_0_avm_unnamed_histogram3_enable(gmem0_global_avm_enable[1]),
      .histogram_0_avm_unnamed_histogram3_read(gmem0_global_avm_read[1]),
      .histogram_0_avm_unnamed_histogram3_write(gmem0_global_avm_write[1]),
      .histogram_0_avm_unnamed_histogram3_burstcount(gmem0_global_avm_burstcount[1]),
      .histogram_0_avm_unnamed_histogram3_address(gmem0_global_avm_address[1]),
      .histogram_0_avm_unnamed_histogram3_writedata(gmem0_global_avm_writedata[1]),
      .histogram_0_avm_unnamed_histogram3_byteenable(gmem0_global_avm_byteenable[1]),
      .histogram_0_avm_unnamed_histogram3_waitrequest(gmem0_global_avm_waitrequest[1]),
      .histogram_0_avm_unnamed_histogram3_readdata(gmem0_global_avm_readdata[1]),
      .histogram_0_avm_unnamed_histogram3_readdatavalid(gmem0_global_avm_readdatavalid[1]),
      .histogram_0_avm_unnamed_histogram3_writeack(gmem0_global_avm_writeack[1])
   );

   assign kernel_irq = |kernel_irqs;
   // INST global_memory_tree0_inst0 of global_memory_tree0_mod
   global_memory_tree0_mod global_memory_tree0_inst0
   (
      .resetn(resetn),
      .clock(clock),
      .clock2x(clock2x),
      // AVM gmem0_mtree_avm
      .gmem0_mtree_avm_enable(gmem0_global_avm_enable),
      .gmem0_mtree_avm_read(gmem0_global_avm_read),
      .gmem0_mtree_avm_write(gmem0_global_avm_write),
      .gmem0_mtree_avm_burstcount(gmem0_global_avm_burstcount),
      .gmem0_mtree_avm_address(gmem0_global_avm_address),
      .gmem0_mtree_avm_writedata(gmem0_global_avm_writedata),
      .gmem0_mtree_avm_byteenable(gmem0_global_avm_byteenable),
      .gmem0_mtree_avm_waitrequest(gmem0_global_avm_waitrequest),
      .gmem0_mtree_avm_readdata(gmem0_global_avm_readdata),
      .gmem0_mtree_avm_readdatavalid(gmem0_global_avm_readdatavalid),
      .gmem0_mtree_avm_writeack(gmem0_global_avm_writeack),
      // AVM mtree_mem_gmem0_port_0_0_rw
      .mtree_mem_gmem0_port_0_0_rw_enable(avm_mem_gmem0_port_0_0_rw_enable),
      .mtree_mem_gmem0_port_0_0_rw_read(avm_mem_gmem0_port_0_0_rw_read),
      .mtree_mem_gmem0_port_0_0_rw_write(avm_mem_gmem0_port_0_0_rw_write),
      .mtree_mem_gmem0_port_0_0_rw_burstcount(avm_mem_gmem0_port_0_0_rw_burstcount),
      .mtree_mem_gmem0_port_0_0_rw_address(avm_mem_gmem0_port_0_0_rw_address),
      .mtree_mem_gmem0_port_0_0_rw_writedata(avm_mem_gmem0_port_0_0_rw_writedata),
      .mtree_mem_gmem0_port_0_0_rw_byteenable(avm_mem_gmem0_port_0_0_rw_byteenable),
      .mtree_mem_gmem0_port_0_0_rw_waitrequest(avm_mem_gmem0_port_0_0_rw_waitrequest),
      .mtree_mem_gmem0_port_0_0_rw_readdata(avm_mem_gmem0_port_0_0_rw_readdata),
      .mtree_mem_gmem0_port_0_0_rw_readdatavalid(avm_mem_gmem0_port_0_0_rw_readdatavalid),
      .mtree_mem_gmem0_port_0_0_rw_writeack(avm_mem_gmem0_port_0_0_rw_writeack)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE histogram_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module histogram_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_histogram,
   // AVS avs_histogram_cra
   input logic avs_histogram_cra_enable,
   input logic avs_histogram_cra_read,
   input logic avs_histogram_cra_write,
   input logic [3:0] avs_histogram_cra_address,
   input logic [63:0] avs_histogram_cra_writedata,
   input logic [7:0] avs_histogram_cra_byteenable,
   output logic [63:0] avs_histogram_cra_readdata,
   output logic avs_histogram_cra_readdatavalid,
   // AVM histogram_0_avm_call36
   output logic histogram_0_avm_call36_enable,
   output logic histogram_0_avm_call36_read,
   output logic histogram_0_avm_call36_write,
   output logic [4:0] histogram_0_avm_call36_burstcount,
   output logic [29:0] histogram_0_avm_call36_address,
   output logic [255:0] histogram_0_avm_call36_writedata,
   output logic [31:0] histogram_0_avm_call36_byteenable,
   input logic histogram_0_avm_call36_waitrequest,
   input logic [255:0] histogram_0_avm_call36_readdata,
   input logic histogram_0_avm_call36_readdatavalid,
   input logic histogram_0_avm_call36_writeack,
   // AVM histogram_0_avm_unnamed_histogram3
   output logic histogram_0_avm_unnamed_histogram3_enable,
   output logic histogram_0_avm_unnamed_histogram3_read,
   output logic histogram_0_avm_unnamed_histogram3_write,
   output logic [4:0] histogram_0_avm_unnamed_histogram3_burstcount,
   output logic [29:0] histogram_0_avm_unnamed_histogram3_address,
   output logic [255:0] histogram_0_avm_unnamed_histogram3_writedata,
   output logic [31:0] histogram_0_avm_unnamed_histogram3_byteenable,
   input logic histogram_0_avm_unnamed_histogram3_waitrequest,
   input logic [255:0] histogram_0_avm_unnamed_histogram3_readdata,
   input logic histogram_0_avm_unnamed_histogram3_readdatavalid,
   input logic histogram_0_avm_unnamed_histogram3_writeack
);
   logic histogram_start;
   logic [0:0] histogram_start_chain;
   logic [0:0] histogram_start_kernel_copy;
   logic [0:0] histogram_start_task_fd;
   logic [0:0] histogram_start_finish_element;
   logic histogram_finish;
   logic [0:0] histogram_finish_kernel_copy;
   logic [0:0] histogram_finish_chain;
   logic [31:0] histogram_global_size [2:0];
   logic [31:0] histogram_num_groups [2:0];
   logic [31:0] histogram_local_size [2:0];
   logic [31:0] histogram_global_offset [2:0];
   logic [31:0] histogram_work_dim;
   logic [31:0] histogram_wg_size;
   logic [0:0] histogram_wg_disp_stall_in;
   logic [0:0] histogram_wg_disp_stall_in_lookahead;
   logic [0:0] histogram_wg_disp_valid_out;
   logic histogram_wg_disp_start_out;
   logic [31:0] histogram_wg_disp_group_id_out [2:0];
   logic [31:0] histogram_wg_disp_global_id_base_out [2:0];
   logic histogram_wg_disp_dispatched_all_groups;
   logic [31:0] histogram_global_id [1][2:0];
   logic [31:0] histogram_local_id [1][2:0];
   logic [31:0] histogram_group_id [1][2:0];
   logic [0:0] histogram_pending_write;
   logic [0:0] histogram_lsu_active;
   logic [0:0] histogram_valid_in;
   logic [0:0] histogram_valid_out;
   logic [0:0] histogram_stall_in;
   logic [0:0] histogram_stall_out;
   logic histogram_cra_pending_write;
   logic histogram_cra_lsu_active;
   logic histogram_cra_valid_in;
   logic [159:0] histogram_kernel_arguments;

   assign histogram_start_chain[0] = histogram_start;
   assign histogram_finish_chain[0] = 1'b1;
   assign histogram_cra_pending_write = |histogram_pending_write;
   assign histogram_cra_lsu_active = |histogram_lsu_active;
   assign histogram_cra_valid_in = |histogram_valid_in;
   assign histogram_stall_in = 0;
   // INST histogram_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .FAMILY("Cyclone V")
   )
   histogram_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(histogram_start),
      .num_groups(histogram_num_groups),
      .local_size(histogram_local_size),
      .stall_in(histogram_wg_disp_stall_in),
      .stall_in_lookahead(histogram_wg_disp_stall_in_lookahead),
      .valid_out(histogram_wg_disp_valid_out),
      .group_id_out(histogram_wg_disp_group_id_out),
      .global_id_base_out(histogram_wg_disp_global_id_base_out),
      .start_out(histogram_wg_disp_start_out),
      .dispatched_all_groups(histogram_wg_disp_dispatched_all_groups)
   );

   // INST histogram_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   histogram_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(histogram_start),
      .wg_size(histogram_wg_size),
      .wg_dispatch_valid_out(histogram_wg_disp_valid_out),
      .wg_dispatch_stall_in(histogram_wg_disp_stall_in),
      .dispatched_all_groups(histogram_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(histogram_valid_out),
      .kernel_copy_stall_in(histogram_stall_in),
      .pending_writes(histogram_cra_pending_write),
      .finish(histogram_finish)
   );

   // INST histogram_cra_slave_inst of histogram_function_cra_slave
   histogram_function_cra_slave histogram_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(histogram_start),
      .finish(histogram_finish),
      .global_offset_0(histogram_global_offset[0]),
      .global_offset_1(histogram_global_offset[1]),
      .global_offset_2(histogram_global_offset[2]),
      .work_dim(histogram_work_dim),
      .has_a_lsu_active(histogram_cra_lsu_active),
      .has_a_write_pending(histogram_cra_pending_write),
      .valid_in(histogram_cra_valid_in),
      .global_size_0(histogram_global_size[0]),
      .global_size_1(histogram_global_size[1]),
      .global_size_2(histogram_global_size[2]),
      .num_groups_0(histogram_num_groups[0]),
      .num_groups_1(histogram_num_groups[1]),
      .num_groups_2(histogram_num_groups[2]),
      .local_size_0(histogram_local_size[0]),
      .local_size_1(histogram_local_size[1]),
      .local_size_2(histogram_local_size[2]),
      .workgroup_size(histogram_wg_size),
      .kernel_arguments(histogram_kernel_arguments),
      .cra_irq(cra_irq_histogram),
      // AVS avs_cra
      .avs_cra_enable(avs_histogram_cra_enable),
      .avs_cra_read(avs_histogram_cra_read),
      .avs_cra_write(avs_histogram_cra_write),
      .avs_cra_address(avs_histogram_cra_address),
      .avs_cra_writedata(avs_histogram_cra_writedata),
      .avs_cra_byteenable(avs_histogram_cra_byteenable),
      .avs_cra_readdata(avs_histogram_cra_readdata),
      .avs_cra_readdatavalid(avs_histogram_cra_readdatavalid)
   );

   // INST histogram_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(8),
      .LOCAL_WIDTH_Y(8),
      .LOCAL_WIDTH_Z(8),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .FAMILY("Cyclone V")
   )
   histogram_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(histogram_wg_disp_start_out),
      .valid_in(histogram_wg_disp_valid_out[0]),
      .stall_out(histogram_wg_disp_stall_in[0]),
      .stall_out_lookahead(histogram_wg_disp_stall_in_lookahead[0]),
      .stall_in(histogram_stall_out[0]),
      .valid_out(histogram_valid_in[0]),
      .group_id_in(histogram_wg_disp_group_id_out),
      .global_id_base_in(histogram_wg_disp_global_id_base_out),
      .local_size(histogram_local_size),
      .global_size(histogram_global_size),
      .local_id(histogram_local_id[0]),
      .global_id(histogram_global_id[0]),
      .group_id(histogram_group_id[0])
   );

   // INST histogram_inst_0 of histogram_top_wrapper_0
   histogram_top_wrapper_0 histogram_inst_0
   (
      .start(histogram_start_kernel_copy[0]),
      .kernel_arguments(histogram_kernel_arguments),
      .work_dim(histogram_work_dim),
      .global_offset(histogram_global_offset),
      .kernel_valid_out(histogram_valid_out[0]),
      .has_a_write_pending(histogram_pending_write[0]),
      .has_a_lsu_active(histogram_lsu_active[0]),
      .global_id(histogram_global_id[0]),
      .local_id(histogram_local_id[0]),
      .group_id(histogram_group_id[0]),
      .global_size(histogram_global_size),
      .local_size(histogram_local_size),
      .num_groups(histogram_num_groups),
      .workgroup_size(histogram_wg_size),
      .kernel_stall_out(histogram_stall_out[0]),
      .kernel_valid_in(histogram_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_call36
      .avm_call36_enable(histogram_0_avm_call36_enable),
      .avm_call36_read(histogram_0_avm_call36_read),
      .avm_call36_write(histogram_0_avm_call36_write),
      .avm_call36_burstcount(histogram_0_avm_call36_burstcount),
      .avm_call36_address(histogram_0_avm_call36_address),
      .avm_call36_writedata(histogram_0_avm_call36_writedata),
      .avm_call36_byteenable(histogram_0_avm_call36_byteenable),
      .avm_call36_waitrequest(histogram_0_avm_call36_waitrequest),
      .avm_call36_readdata(histogram_0_avm_call36_readdata),
      .avm_call36_readdatavalid(histogram_0_avm_call36_readdatavalid),
      .avm_call36_writeack(histogram_0_avm_call36_writeack),
      // AVM avm_unnamed_histogram3
      .avm_unnamed_histogram3_enable(histogram_0_avm_unnamed_histogram3_enable),
      .avm_unnamed_histogram3_read(histogram_0_avm_unnamed_histogram3_read),
      .avm_unnamed_histogram3_write(histogram_0_avm_unnamed_histogram3_write),
      .avm_unnamed_histogram3_burstcount(histogram_0_avm_unnamed_histogram3_burstcount),
      .avm_unnamed_histogram3_address(histogram_0_avm_unnamed_histogram3_address),
      .avm_unnamed_histogram3_writedata(histogram_0_avm_unnamed_histogram3_writedata),
      .avm_unnamed_histogram3_byteenable(histogram_0_avm_unnamed_histogram3_byteenable),
      .avm_unnamed_histogram3_waitrequest(histogram_0_avm_unnamed_histogram3_waitrequest),
      .avm_unnamed_histogram3_readdata(histogram_0_avm_unnamed_histogram3_readdata),
      .avm_unnamed_histogram3_readdatavalid(histogram_0_avm_unnamed_histogram3_readdatavalid),
      .avm_unnamed_histogram3_writeack(histogram_0_avm_unnamed_histogram3_writeack)
   );

   // INST histogram_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   histogram_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(histogram_start_chain[0]),
      .start_kernel(histogram_start_kernel_copy[0]),
      .start_finish_detector(histogram_start_task_fd[0]),
      .start_finish_chain_element(histogram_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE histogram_top_wrapper_0
/////////////////////////////////////////////////////////////////
module histogram_top_wrapper_0
(
   input logic start,
   input logic [159:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [31:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [31:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [31:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_call36
   output logic avm_call36_enable,
   output logic avm_call36_read,
   output logic avm_call36_write,
   output logic [4:0] avm_call36_burstcount,
   output logic [29:0] avm_call36_address,
   output logic [255:0] avm_call36_writedata,
   output logic [31:0] avm_call36_byteenable,
   input logic avm_call36_waitrequest,
   input logic [255:0] avm_call36_readdata,
   input logic avm_call36_readdatavalid,
   input logic avm_call36_writeack,
   // AVM avm_unnamed_histogram3
   output logic avm_unnamed_histogram3_enable,
   output logic avm_unnamed_histogram3_read,
   output logic avm_unnamed_histogram3_write,
   output logic [4:0] avm_unnamed_histogram3_burstcount,
   output logic [29:0] avm_unnamed_histogram3_address,
   output logic [255:0] avm_unnamed_histogram3_writedata,
   output logic [31:0] avm_unnamed_histogram3_byteenable,
   input logic avm_unnamed_histogram3_waitrequest,
   input logic [255:0] avm_unnamed_histogram3_readdata,
   input logic avm_unnamed_histogram3_readdatavalid,
   input logic avm_unnamed_histogram3_writeack
);
   genvar __i;
   genvar __j;
   logic lmem_invalid_single_bit;
   logic lmem_invalid_aspaces;
   logic local_avm_aspace5_enable [1][3];
   logic local_avm_aspace5_read [1][3];
   logic local_avm_aspace5_write [1][3];
   logic local_avm_aspace5_burstcount [1][3];
   logic [31:0] local_avm_aspace5_address [1][3];
   logic [127:0] local_avm_aspace5_writedata [1][3];
   logic [15:0] local_avm_aspace5_byteenable [1][3];
   logic local_avm_aspace5_waitrequest [1][3];
   logic [127:0] local_avm_aspace5_readdata [1][3];
   logic local_avm_aspace5_readdatavalid [1][3];
   logic local_avm_aspace5_writeack [1][3];

   // INST kernel of histogram_function_wrapper
   histogram_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_call36
      .avm_call36_enable(avm_call36_enable),
      .avm_call36_read(avm_call36_read),
      .avm_call36_write(avm_call36_write),
      .avm_call36_burstcount(avm_call36_burstcount),
      .avm_call36_address(avm_call36_address),
      .avm_call36_writedata(avm_call36_writedata),
      .avm_call36_byteenable(avm_call36_byteenable),
      .avm_call36_waitrequest(avm_call36_waitrequest),
      .avm_call36_readdata(avm_call36_readdata),
      .avm_call36_readdatavalid(avm_call36_readdatavalid),
      .avm_call36_writeack(avm_call36_writeack),
      // AVM avm_unnamed_histogram3
      .avm_unnamed_histogram3_enable(avm_unnamed_histogram3_enable),
      .avm_unnamed_histogram3_read(avm_unnamed_histogram3_read),
      .avm_unnamed_histogram3_write(avm_unnamed_histogram3_write),
      .avm_unnamed_histogram3_burstcount(avm_unnamed_histogram3_burstcount),
      .avm_unnamed_histogram3_address(avm_unnamed_histogram3_address),
      .avm_unnamed_histogram3_writedata(avm_unnamed_histogram3_writedata),
      .avm_unnamed_histogram3_byteenable(avm_unnamed_histogram3_byteenable),
      .avm_unnamed_histogram3_waitrequest(avm_unnamed_histogram3_waitrequest),
      .avm_unnamed_histogram3_readdata(avm_unnamed_histogram3_readdata),
      .avm_unnamed_histogram3_readdatavalid(avm_unnamed_histogram3_readdatavalid),
      .avm_unnamed_histogram3_writeack(avm_unnamed_histogram3_writeack),
      // AVM avm_call1819
      .avm_call1819_enable(local_avm_aspace5_enable[0][0]),
      .avm_call1819_read(local_avm_aspace5_read[0][0]),
      .avm_call1819_write(local_avm_aspace5_write[0][0]),
      .avm_call1819_burstcount(local_avm_aspace5_burstcount[0][0]),
      .avm_call1819_address(local_avm_aspace5_address[0][0]),
      .avm_call1819_writedata(local_avm_aspace5_writedata[0][0]),
      .avm_call1819_byteenable(local_avm_aspace5_byteenable[0][0]),
      .avm_call1819_waitrequest(local_avm_aspace5_waitrequest[0][0]),
      .avm_call1819_readdata(local_avm_aspace5_readdata[0][0]),
      .avm_call1819_readdatavalid(local_avm_aspace5_readdatavalid[0][0]),
      .avm_call1819_writeack(local_avm_aspace5_writeack[0][0]),
      // AVM avm_unnamed_histogram0
      .avm_unnamed_histogram0_enable(local_avm_aspace5_enable[0][1]),
      .avm_unnamed_histogram0_read(local_avm_aspace5_read[0][1]),
      .avm_unnamed_histogram0_write(local_avm_aspace5_write[0][1]),
      .avm_unnamed_histogram0_burstcount(local_avm_aspace5_burstcount[0][1]),
      .avm_unnamed_histogram0_address(local_avm_aspace5_address[0][1]),
      .avm_unnamed_histogram0_writedata(local_avm_aspace5_writedata[0][1]),
      .avm_unnamed_histogram0_byteenable(local_avm_aspace5_byteenable[0][1]),
      .avm_unnamed_histogram0_waitrequest(local_avm_aspace5_waitrequest[0][1]),
      .avm_unnamed_histogram0_readdata(local_avm_aspace5_readdata[0][1]),
      .avm_unnamed_histogram0_readdatavalid(local_avm_aspace5_readdatavalid[0][1]),
      .avm_unnamed_histogram0_writeack(local_avm_aspace5_writeack[0][1]),
      // AVM avm_unnamed_histogram5
      .avm_unnamed_histogram5_enable(local_avm_aspace5_enable[0][2]),
      .avm_unnamed_histogram5_read(local_avm_aspace5_read[0][2]),
      .avm_unnamed_histogram5_write(local_avm_aspace5_write[0][2]),
      .avm_unnamed_histogram5_burstcount(local_avm_aspace5_burstcount[0][2]),
      .avm_unnamed_histogram5_address(local_avm_aspace5_address[0][2]),
      .avm_unnamed_histogram5_writedata(local_avm_aspace5_writedata[0][2]),
      .avm_unnamed_histogram5_byteenable(local_avm_aspace5_byteenable[0][2]),
      .avm_unnamed_histogram5_waitrequest(local_avm_aspace5_waitrequest[0][2]),
      .avm_unnamed_histogram5_readdata(local_avm_aspace5_readdata[0][2]),
      .avm_unnamed_histogram5_readdatavalid(local_avm_aspace5_readdatavalid[0][2]),
      .avm_unnamed_histogram5_writeack(local_avm_aspace5_writeack[0][2])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace5
      logic local_icm_arb_request [1][3];
      logic local_icm_arb_enable [1][3];
      logic local_icm_arb_read [1][3];
      logic local_icm_arb_write [1][3];
      logic local_icm_arb_burstcount [1][3];
      logic [10:0] local_icm_arb_address [1][3];
      logic [127:0] local_icm_arb_writedata [1][3];
      logic [15:0] local_icm_arb_byteenable [1][3];
      logic local_icm_arb_stall [1][3];
      logic local_icm_wrp_ack [1][3];
      logic local_icm_rrp_datavalid [1][3];
      logic [127:0] local_icm_rrp_data [1][3];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 3; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(16)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace5_enable[__i][__j]),
               .avm_read(local_avm_aspace5_read[__i][__j]),
               .avm_write(local_avm_aspace5_write[__i][__j]),
               .avm_burstcount(local_avm_aspace5_burstcount[__i][__j]),
               .avm_address(local_avm_aspace5_address[__i][__j]),
               .avm_writedata(local_avm_aspace5_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace5_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace5_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace5_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace5_readdatavalid[__i][__j]),
               .avm_writeack(local_avm_aspace5_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [10:0] port_address [1:4];
            logic [127:0] port_writedata [1:4];
            logic [15:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [127:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];
            logic atomic_port_enable;
            logic atomic_port_read;
            logic atomic_port_write;
            logic [10:0] atomic_port_address;
            logic [127:0] atomic_port_writedata;
            logic [15:0] atomic_port_byteenable;
            logic atomic_port_waitrequest;
            logic [127:0] atomic_port_readdata;
            logic atomic_port_readdatavalid;

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(2048),
               .WIDTH(32),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .PREFERRED_WIDTH(160),
               .MAXIMUM_DEPTH(0),
               .RAM_BLOCK_TYPE("M10K")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(atomic_port_enable),
               .avs_port4_read(atomic_port_read),
               .avs_port4_write(atomic_port_write),
               .avs_port4_address(atomic_port_address),
               .avs_port4_writedata(atomic_port_writedata),
               .avs_port4_byteenable(atomic_port_byteenable),
               .avs_port4_waitrequest(atomic_port_waitrequest),
               .avs_port4_readdata(atomic_port_readdata),
               .avs_port4_readdatavalid(atomic_port_readdatavalid)
            );

            // INST acl_atomics_nostall_local of acl_atomics_nostall
            acl_atomics_nostall
            #(
               .DATA_WIDTH(128),
               .ADDR_WIDTH(11),
               .BYTEEN_WIDTH(16),
               .USED_ATOMIC_OPERATIONS(1),
               .LOCAL_MEM(1),
               .NUM_TXS(8)
            )
            acl_atomics_nostall_local
            (
               .clock(clock),
               .resetn(resetn),
               // AVS mem_arb
               .mem_arb_enable(port_enable[4]),
               .mem_arb_read(port_read[4]),
               .mem_arb_write(port_write[4]),
               .mem_arb_address(port_address[4]),
               .mem_arb_writedata(port_writedata[4]),
               .mem_arb_byteenable(port_byteenable[4]),
               .mem_arb_waitrequest(port_waitrequest[4]),
               .mem_arb_readdata(port_readdata[4]),
               .mem_arb_readdatavalid(port_readdatavalid[4]),
               // AVS mem_avm
               .mem_avm_enable(atomic_port_enable),
               .mem_avm_read(atomic_port_read),
               .mem_avm_write(atomic_port_write),
               .mem_avm_address(atomic_port_address),
               .mem_avm_writedata(atomic_port_writedata),
               .mem_avm_byteenable(atomic_port_byteenable),
               .mem_avm_waitrequest(atomic_port_waitrequest),
               .mem_avm_readdata(atomic_port_readdata),
               .mem_avm_readdatavalid(atomic_port_readdatavalid)
            );

         end

         for( __j = 0; __j < 3; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [10:0] b_arb_address [1];
            logic [127:0] b_arb_writedata [1];
            logic [15:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [127:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(11),
               .BYTEENA_W(16),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of hist_system_interconnect_2
            hist_system_interconnect_2 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of hist_system_interconnect_3
            hist_system_interconnect_3 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank0
            assign bank[0].port_enable[3] = '0;
            assign bank[0].port_read[3] = '0;
            assign bank[0].port_write[3] = '0;
            assign bank[0].port_address[3] = '0;
            assign bank[0].port_writedata[3] = '0;
            assign bank[0].port_byteenable[3] = '0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [10:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [10:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of hist_system_interconnect_3
            hist_system_interconnect_3 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE global_memory_tree0_mod
/////////////////////////////////////////////////////////////////
module global_memory_tree0_mod
(
   input logic resetn,
   input logic clock,
   input logic clock2x,
   // AVM gmem0_mtree_avm
   input logic gmem0_mtree_avm_enable [2],
   input logic gmem0_mtree_avm_read [2],
   input logic gmem0_mtree_avm_write [2],
   input logic [4:0] gmem0_mtree_avm_burstcount [2],
   input logic [29:0] gmem0_mtree_avm_address [2],
   input logic [255:0] gmem0_mtree_avm_writedata [2],
   input logic [31:0] gmem0_mtree_avm_byteenable [2],
   output logic gmem0_mtree_avm_waitrequest [2],
   output logic [255:0] gmem0_mtree_avm_readdata [2],
   output logic gmem0_mtree_avm_readdatavalid [2],
   output logic gmem0_mtree_avm_writeack [2],
   // AVM mtree_mem_gmem0_port_0_0_rw
   output logic mtree_mem_gmem0_port_0_0_rw_enable,
   output logic mtree_mem_gmem0_port_0_0_rw_read,
   output logic mtree_mem_gmem0_port_0_0_rw_write,
   output logic [4:0] mtree_mem_gmem0_port_0_0_rw_burstcount,
   output logic [29:0] mtree_mem_gmem0_port_0_0_rw_address,
   output logic [255:0] mtree_mem_gmem0_port_0_0_rw_writedata,
   output logic [31:0] mtree_mem_gmem0_port_0_0_rw_byteenable,
   input logic mtree_mem_gmem0_port_0_0_rw_waitrequest,
   input logic [255:0] mtree_mem_gmem0_port_0_0_rw_readdata,
   input logic mtree_mem_gmem0_port_0_0_rw_readdatavalid,
   input logic mtree_mem_gmem0_port_0_0_rw_writeack
);
   genvar __i;
   generate
   begin:gmem0_
      logic gmem0_icm_in_arb_request [2];
      logic gmem0_icm_in_arb_enable [2];
      logic gmem0_icm_in_arb_read [2];
      logic gmem0_icm_in_arb_write [2];
      logic [4:0] gmem0_icm_in_arb_burstcount [2];
      logic [24:0] gmem0_icm_in_arb_address [2];
      logic [255:0] gmem0_icm_in_arb_writedata [2];
      logic [31:0] gmem0_icm_in_arb_byteenable [2];
      logic gmem0_icm_in_arb_stall [2];
      logic gmem0_icm_in_wrp_ack [2];
      logic gmem0_icm_in_rrp_datavalid [2];
      logic [255:0] gmem0_icm_in_rrp_data [2];
      logic gmem0_icm_preroute_arb_request [2];
      logic gmem0_icm_preroute_arb_enable [2];
      logic gmem0_icm_preroute_arb_read [2];
      logic gmem0_icm_preroute_arb_write [2];
      logic [4:0] gmem0_icm_preroute_arb_burstcount [2];
      logic [24:0] gmem0_icm_preroute_arb_address [2];
      logic [255:0] gmem0_icm_preroute_arb_writedata [2];
      logic [31:0] gmem0_icm_preroute_arb_byteenable [2];
      logic gmem0_icm_preroute_arb_stall [2];
      logic gmem0_icm_preroute_wrp_ack [2];
      logic gmem0_icm_preroute_rrp_datavalid [2];
      logic [255:0] gmem0_icm_preroute_rrp_data [2];
      logic icm_groupgmem0_router_0_arb_request [1];
      logic icm_groupgmem0_router_0_arb_enable [1];
      logic icm_groupgmem0_router_0_arb_read [1];
      logic icm_groupgmem0_router_0_arb_write [1];
      logic [4:0] icm_groupgmem0_router_0_arb_burstcount [1];
      logic [24:0] icm_groupgmem0_router_0_arb_address [1];
      logic [255:0] icm_groupgmem0_router_0_arb_writedata [1];
      logic [31:0] icm_groupgmem0_router_0_arb_byteenable [1];
      logic icm_groupgmem0_router_0_arb_stall [1];
      logic icm_groupgmem0_router_0_wrp_ack [1];
      logic icm_groupgmem0_router_0_rrp_datavalid [1];
      logic [255:0] icm_groupgmem0_router_0_rrp_data [1];
      logic icm_groupgmem0_router_1_arb_request [1];
      logic icm_groupgmem0_router_1_arb_enable [1];
      logic icm_groupgmem0_router_1_arb_read [1];
      logic icm_groupgmem0_router_1_arb_write [1];
      logic [4:0] icm_groupgmem0_router_1_arb_burstcount [1];
      logic [24:0] icm_groupgmem0_router_1_arb_address [1];
      logic [255:0] icm_groupgmem0_router_1_arb_writedata [1];
      logic [31:0] icm_groupgmem0_router_1_arb_byteenable [1];
      logic icm_groupgmem0_router_1_arb_stall [1];
      logic icm_groupgmem0_router_1_wrp_ack [1];
      logic icm_groupgmem0_router_1_rrp_datavalid [1];
      logic [255:0] icm_groupgmem0_router_1_rrp_data [1];
      logic icm_out_0_rw_arb_request [1];
      logic icm_out_0_rw_arb_enable [1];
      logic icm_out_0_rw_arb_read [1];
      logic icm_out_0_rw_arb_write [1];
      logic [4:0] icm_out_0_rw_arb_burstcount [1];
      logic [24:0] icm_out_0_rw_arb_address [1];
      logic [255:0] icm_out_0_rw_arb_writedata [1];
      logic [31:0] icm_out_0_rw_arb_byteenable [1];
      logic icm_out_0_rw_arb_id [1];
      logic icm_out_0_rw_arb_stall [1];
      logic icm_out_0_rw_wrp_ack [1];
      logic icm_out_0_rw_rrp_datavalid [1];
      logic [255:0] icm_out_0_rw_rrp_data [1];
      logic icm_routedgmem0_port_0_0_rw_arb_request [2];
      logic icm_routedgmem0_port_0_0_rw_arb_enable [2];
      logic icm_routedgmem0_port_0_0_rw_arb_read [2];
      logic icm_routedgmem0_port_0_0_rw_arb_write [2];
      logic [4:0] icm_routedgmem0_port_0_0_rw_arb_burstcount [2];
      logic [24:0] icm_routedgmem0_port_0_0_rw_arb_address [2];
      logic [255:0] icm_routedgmem0_port_0_0_rw_arb_writedata [2];
      logic [31:0] icm_routedgmem0_port_0_0_rw_arb_byteenable [2];
      logic icm_routedgmem0_port_0_0_rw_arb_stall [2];
      logic icm_routedgmem0_port_0_0_rw_wrp_ack [2];
      logic icm_routedgmem0_port_0_0_rw_rrp_datavalid [2];
      logic [255:0] icm_routedgmem0_port_0_0_rw_rrp_data [2];
      logic avm_mem_atomics_ingmem0_port_0_0_rw_enable;
      logic avm_mem_atomics_ingmem0_port_0_0_rw_read;
      logic avm_mem_atomics_ingmem0_port_0_0_rw_write;
      logic [4:0] avm_mem_atomics_ingmem0_port_0_0_rw_burstcount;
      logic [29:0] avm_mem_atomics_ingmem0_port_0_0_rw_address;
      logic [255:0] avm_mem_atomics_ingmem0_port_0_0_rw_writedata;
      logic [31:0] avm_mem_atomics_ingmem0_port_0_0_rw_byteenable;
      logic avm_mem_atomics_ingmem0_port_0_0_rw_waitrequest;
      logic [255:0] avm_mem_atomics_ingmem0_port_0_0_rw_readdata;
      logic avm_mem_atomics_ingmem0_port_0_0_rw_readdatavalid;
      logic avm_mem_atomics_ingmem0_port_0_0_rw_writeack;

      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:t
         // INST gmem0_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(256),
            .WRITEDATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(30),
            .BYTEENA_W(32)
         )
         gmem0_avm_to_ic
         (
            // AVM avm
            .avm_enable(gmem0_mtree_avm_enable[__i]),
            .avm_read(gmem0_mtree_avm_read[__i]),
            .avm_write(gmem0_mtree_avm_write[__i]),
            .avm_burstcount(gmem0_mtree_avm_burstcount[__i]),
            .avm_address(gmem0_mtree_avm_address[__i]),
            .avm_writedata(gmem0_mtree_avm_writedata[__i]),
            .avm_byteenable(gmem0_mtree_avm_byteenable[__i]),
            .avm_waitrequest(gmem0_mtree_avm_waitrequest[__i]),
            .avm_readdata(gmem0_mtree_avm_readdata[__i]),
            .avm_readdatavalid(gmem0_mtree_avm_readdatavalid[__i]),
            .avm_writeack(gmem0_mtree_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(gmem0_icm_in_arb_request[__i]),
            .ic_arb_enable(gmem0_icm_in_arb_enable[__i]),
            .ic_arb_read(gmem0_icm_in_arb_read[__i]),
            .ic_arb_write(gmem0_icm_in_arb_write[__i]),
            .ic_arb_burstcount(gmem0_icm_in_arb_burstcount[__i]),
            .ic_arb_address(gmem0_icm_in_arb_address[__i]),
            .ic_arb_writedata(gmem0_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(gmem0_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(gmem0_icm_in_arb_stall[__i]),
            .ic_wrp_ack(gmem0_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(gmem0_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(gmem0_icm_in_rrp_data[__i])
         );

      end

      assign icm_groupgmem0_router_0_arb_request[0] = gmem0_icm_in_arb_request[1];
      assign icm_groupgmem0_router_0_arb_enable[0] = gmem0_icm_in_arb_enable[1];
      assign icm_groupgmem0_router_0_arb_read[0] = gmem0_icm_in_arb_read[1];
      assign icm_groupgmem0_router_0_arb_write[0] = gmem0_icm_in_arb_write[1];
      assign icm_groupgmem0_router_0_arb_burstcount[0] = gmem0_icm_in_arb_burstcount[1];
      assign icm_groupgmem0_router_0_arb_address[0] = gmem0_icm_in_arb_address[1];
      assign icm_groupgmem0_router_0_arb_writedata[0] = gmem0_icm_in_arb_writedata[1];
      assign icm_groupgmem0_router_0_arb_byteenable[0] = gmem0_icm_in_arb_byteenable[1];
      assign gmem0_icm_in_arb_stall[1] = icm_groupgmem0_router_0_arb_stall[0];
      assign gmem0_icm_in_wrp_ack[1] = icm_groupgmem0_router_0_wrp_ack[0];
      assign gmem0_icm_in_rrp_datavalid[1] = icm_groupgmem0_router_0_rrp_datavalid[0];
      assign gmem0_icm_in_rrp_data[1] = icm_groupgmem0_router_0_rrp_data[0];
      // INST global_ic_preroutegmem0_router_0 of hist_system_interconnect_0
      hist_system_interconnect_0 global_ic_preroutegmem0_router_0
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_router_0_arb_request),
         .m_arb_enable(icm_groupgmem0_router_0_arb_enable),
         .m_arb_read(icm_groupgmem0_router_0_arb_read),
         .m_arb_write(icm_groupgmem0_router_0_arb_write),
         .m_arb_burstcount(icm_groupgmem0_router_0_arb_burstcount),
         .m_arb_address(icm_groupgmem0_router_0_arb_address),
         .m_arb_writedata(icm_groupgmem0_router_0_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_router_0_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_router_0_arb_stall),
         .m_wrp_ack(icm_groupgmem0_router_0_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_router_0_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_router_0_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_icm_preroute_arb_request[0]),
         .mout_arb_enable(gmem0_icm_preroute_arb_enable[0]),
         .mout_arb_read(gmem0_icm_preroute_arb_read[0]),
         .mout_arb_write(gmem0_icm_preroute_arb_write[0]),
         .mout_arb_burstcount(gmem0_icm_preroute_arb_burstcount[0]),
         .mout_arb_address(gmem0_icm_preroute_arb_address[0]),
         .mout_arb_writedata(gmem0_icm_preroute_arb_writedata[0]),
         .mout_arb_byteenable(gmem0_icm_preroute_arb_byteenable[0]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_icm_preroute_arb_stall[0]),
         .mout_wrp_ack(gmem0_icm_preroute_wrp_ack[0]),
         .mout_rrp_datavalid(gmem0_icm_preroute_rrp_datavalid[0]),
         .mout_rrp_data(gmem0_icm_preroute_rrp_data[0])
      );

      assign icm_groupgmem0_router_1_arb_request[0] = gmem0_icm_in_arb_request[0];
      assign icm_groupgmem0_router_1_arb_enable[0] = gmem0_icm_in_arb_enable[0];
      assign icm_groupgmem0_router_1_arb_read[0] = gmem0_icm_in_arb_read[0];
      assign icm_groupgmem0_router_1_arb_write[0] = gmem0_icm_in_arb_write[0];
      assign icm_groupgmem0_router_1_arb_burstcount[0] = gmem0_icm_in_arb_burstcount[0];
      assign icm_groupgmem0_router_1_arb_address[0] = gmem0_icm_in_arb_address[0];
      assign icm_groupgmem0_router_1_arb_writedata[0] = gmem0_icm_in_arb_writedata[0];
      assign icm_groupgmem0_router_1_arb_byteenable[0] = gmem0_icm_in_arb_byteenable[0];
      assign gmem0_icm_in_arb_stall[0] = icm_groupgmem0_router_1_arb_stall[0];
      assign gmem0_icm_in_wrp_ack[0] = icm_groupgmem0_router_1_wrp_ack[0];
      assign gmem0_icm_in_rrp_datavalid[0] = icm_groupgmem0_router_1_rrp_datavalid[0];
      assign gmem0_icm_in_rrp_data[0] = icm_groupgmem0_router_1_rrp_data[0];
      // INST global_ic_preroutegmem0_router_1 of hist_system_interconnect_0
      hist_system_interconnect_0 global_ic_preroutegmem0_router_1
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_router_1_arb_request),
         .m_arb_enable(icm_groupgmem0_router_1_arb_enable),
         .m_arb_read(icm_groupgmem0_router_1_arb_read),
         .m_arb_write(icm_groupgmem0_router_1_arb_write),
         .m_arb_burstcount(icm_groupgmem0_router_1_arb_burstcount),
         .m_arb_address(icm_groupgmem0_router_1_arb_address),
         .m_arb_writedata(icm_groupgmem0_router_1_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_router_1_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_router_1_arb_stall),
         .m_wrp_ack(icm_groupgmem0_router_1_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_router_1_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_router_1_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_icm_preroute_arb_request[1]),
         .mout_arb_enable(gmem0_icm_preroute_arb_enable[1]),
         .mout_arb_read(gmem0_icm_preroute_arb_read[1]),
         .mout_arb_write(gmem0_icm_preroute_arb_write[1]),
         .mout_arb_burstcount(gmem0_icm_preroute_arb_burstcount[1]),
         .mout_arb_address(gmem0_icm_preroute_arb_address[1]),
         .mout_arb_writedata(gmem0_icm_preroute_arb_writedata[1]),
         .mout_arb_byteenable(gmem0_icm_preroute_arb_byteenable[1]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_icm_preroute_arb_stall[1]),
         .mout_wrp_ack(gmem0_icm_preroute_wrp_ack[1]),
         .mout_rrp_datavalid(gmem0_icm_preroute_rrp_datavalid[1]),
         .mout_rrp_data(gmem0_icm_preroute_rrp_data[1])
      );

      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:router
         logic b_arb_request [1];
         logic b_arb_enable [1];
         logic b_arb_read [1];
         logic b_arb_write [1];
         logic [4:0] b_arb_burstcount [1];
         logic [24:0] b_arb_address [1];
         logic [255:0] b_arb_writedata [1];
         logic [31:0] b_arb_byteenable [1];
         logic b_arb_stall [1];
         logic b_wrp_ack [1];
         logic b_rrp_datavalid [1];
         logic [255:0] b_rrp_data [1];
         logic bank_select;

         // INST router of acl_ic_mem_router
         acl_ic_mem_router
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .NUM_BANKS(1)
         )
         router
         (
            .clock(clock),
            .resetn(resetn),
            .bank_select(bank_select),
            // ICM m
            .m_arb_request(gmem0_icm_preroute_arb_request[__i]),
            .m_arb_enable(gmem0_icm_preroute_arb_enable[__i]),
            .m_arb_read(gmem0_icm_preroute_arb_read[__i]),
            .m_arb_write(gmem0_icm_preroute_arb_write[__i]),
            .m_arb_burstcount(gmem0_icm_preroute_arb_burstcount[__i]),
            .m_arb_address(gmem0_icm_preroute_arb_address[__i]),
            .m_arb_writedata(gmem0_icm_preroute_arb_writedata[__i]),
            .m_arb_byteenable(gmem0_icm_preroute_arb_byteenable[__i]),
            .m_arb_stall(gmem0_icm_preroute_arb_stall[__i]),
            .m_wrp_ack(gmem0_icm_preroute_wrp_ack[__i]),
            .m_rrp_datavalid(gmem0_icm_preroute_rrp_datavalid[__i]),
            .m_rrp_data(gmem0_icm_preroute_rrp_data[__i]),
            // ICM b
            .b_arb_request(b_arb_request),
            .b_arb_enable(b_arb_enable),
            .b_arb_read(b_arb_read),
            .b_arb_write(b_arb_write),
            .b_arb_burstcount(b_arb_burstcount),
            .b_arb_address(b_arb_address),
            .b_arb_writedata(b_arb_writedata),
            .b_arb_byteenable(b_arb_byteenable),
            .b_arb_stall(b_arb_stall),
            .b_wrp_ack(b_wrp_ack),
            .b_rrp_datavalid(b_rrp_datavalid),
            .b_rrp_data(b_rrp_data)
         );

         assign bank_select = 1'b1;
      end

      // INST global_icgmem0_port_0_0_rw of hist_system_interconnect_1
      hist_system_interconnect_1 global_icgmem0_port_0_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedgmem0_port_0_0_rw_arb_request),
         .m_arb_enable(icm_routedgmem0_port_0_0_rw_arb_enable),
         .m_arb_read(icm_routedgmem0_port_0_0_rw_arb_read),
         .m_arb_write(icm_routedgmem0_port_0_0_rw_arb_write),
         .m_arb_burstcount(icm_routedgmem0_port_0_0_rw_arb_burstcount),
         .m_arb_address(icm_routedgmem0_port_0_0_rw_arb_address),
         .m_arb_writedata(icm_routedgmem0_port_0_0_rw_arb_writedata),
         .m_arb_byteenable(icm_routedgmem0_port_0_0_rw_arb_byteenable),
         .m_arb_stall(icm_routedgmem0_port_0_0_rw_arb_stall),
         .m_wrp_ack(icm_routedgmem0_port_0_0_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedgmem0_port_0_0_rw_rrp_datavalid),
         .m_rrp_data(icm_routedgmem0_port_0_0_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:mgmem0_port_0_0_rw
         assign icm_routedgmem0_port_0_0_rw_arb_request[__i] = router[__i].b_arb_request[0];
         assign icm_routedgmem0_port_0_0_rw_arb_enable[__i] = router[__i].b_arb_enable[0];
         assign icm_routedgmem0_port_0_0_rw_arb_read[__i] = router[__i].b_arb_read[0];
         assign icm_routedgmem0_port_0_0_rw_arb_write[__i] = router[__i].b_arb_write[0];
         assign icm_routedgmem0_port_0_0_rw_arb_burstcount[__i] = router[__i].b_arb_burstcount[0];
         assign icm_routedgmem0_port_0_0_rw_arb_address[__i] = router[__i].b_arb_address[0];
         assign icm_routedgmem0_port_0_0_rw_arb_writedata[__i] = router[__i].b_arb_writedata[0];
         assign icm_routedgmem0_port_0_0_rw_arb_byteenable[__i] = router[__i].b_arb_byteenable[0];
         assign router[__i].b_arb_stall[0] = icm_routedgmem0_port_0_0_rw_arb_stall[__i];
         assign router[__i].b_wrp_ack[0] = icm_routedgmem0_port_0_0_rw_wrp_ack[__i];
         assign router[__i].b_rrp_datavalid[0] = icm_routedgmem0_port_0_0_rw_rrp_datavalid[__i];
         assign router[__i].b_rrp_data[0] = icm_routedgmem0_port_0_0_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmgmem0_port_0_0_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(30),
         .BYTEENA_W(32),
         .LATENCY(0),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ID_W(1)
      )
      global_out_ic_to_avmgmem0_port_0_0_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(avm_mem_atomics_ingmem0_port_0_0_rw_enable),
         .avm_read(avm_mem_atomics_ingmem0_port_0_0_rw_read),
         .avm_write(avm_mem_atomics_ingmem0_port_0_0_rw_write),
         .avm_burstcount(avm_mem_atomics_ingmem0_port_0_0_rw_burstcount),
         .avm_address(avm_mem_atomics_ingmem0_port_0_0_rw_address),
         .avm_writedata(avm_mem_atomics_ingmem0_port_0_0_rw_writedata),
         .avm_byteenable(avm_mem_atomics_ingmem0_port_0_0_rw_byteenable),
         .avm_waitrequest(avm_mem_atomics_ingmem0_port_0_0_rw_waitrequest),
         .avm_readdata(avm_mem_atomics_ingmem0_port_0_0_rw_readdata),
         .avm_readdatavalid(avm_mem_atomics_ingmem0_port_0_0_rw_readdatavalid),
         .avm_writeack(avm_mem_atomics_ingmem0_port_0_0_rw_writeack),
         .clock(),
         .resetn()
      );

      // INST acl_atomics_nostallgmem0_port_0_0_rw of acl_atomics_nostall
      acl_atomics_nostall
      #(
         .DATA_WIDTH(256),
         .BURST_WIDTH(5),
         .ADDR_WIDTH(30),
         .BYTEEN_WIDTH(32),
         .USED_ATOMIC_OPERATIONS(1)
      )
      acl_atomics_nostallgmem0_port_0_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // AVM mem_arb
         .mem_arb_enable(avm_mem_atomics_ingmem0_port_0_0_rw_enable),
         .mem_arb_read(avm_mem_atomics_ingmem0_port_0_0_rw_read),
         .mem_arb_write(avm_mem_atomics_ingmem0_port_0_0_rw_write),
         .mem_arb_burstcount(avm_mem_atomics_ingmem0_port_0_0_rw_burstcount),
         .mem_arb_address(avm_mem_atomics_ingmem0_port_0_0_rw_address),
         .mem_arb_writedata(avm_mem_atomics_ingmem0_port_0_0_rw_writedata),
         .mem_arb_byteenable(avm_mem_atomics_ingmem0_port_0_0_rw_byteenable),
         .mem_arb_waitrequest(avm_mem_atomics_ingmem0_port_0_0_rw_waitrequest),
         .mem_arb_readdata(avm_mem_atomics_ingmem0_port_0_0_rw_readdata),
         .mem_arb_readdatavalid(avm_mem_atomics_ingmem0_port_0_0_rw_readdatavalid),
         .mem_arb_writeack(avm_mem_atomics_ingmem0_port_0_0_rw_writeack),
         // AVM mem_avm
         .mem_avm_enable(mtree_mem_gmem0_port_0_0_rw_enable),
         .mem_avm_read(mtree_mem_gmem0_port_0_0_rw_read),
         .mem_avm_write(mtree_mem_gmem0_port_0_0_rw_write),
         .mem_avm_burstcount(mtree_mem_gmem0_port_0_0_rw_burstcount),
         .mem_avm_address(mtree_mem_gmem0_port_0_0_rw_address),
         .mem_avm_writedata(mtree_mem_gmem0_port_0_0_rw_writedata),
         .mem_avm_byteenable(mtree_mem_gmem0_port_0_0_rw_byteenable),
         .mem_avm_waitrequest(mtree_mem_gmem0_port_0_0_rw_waitrequest),
         .mem_avm_readdata(mtree_mem_gmem0_port_0_0_rw_readdata),
         .mem_avm_readdatavalid(mtree_mem_gmem0_port_0_0_rw_readdatavalid),
         .mem_avm_writeack(mtree_mem_gmem0_port_0_0_rw_writeack)
      );

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE hist_system_interconnect_0
/////////////////////////////////////////////////////////////////
module hist_system_interconnect_0
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic [4:0] m_arb_burstcount [1],
   input logic [24:0] m_arb_address [1],
   input logic [255:0] m_arb_writedata [1],
   input logic [31:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [255:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [24:0] mout_arb_address,
   output logic [255:0] mout_arb_writedata,
   output logic [31:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [255:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(256),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(32),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(32),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(256),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(32),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(64),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE hist_system_interconnect_1
/////////////////////////////////////////////////////////////////
module hist_system_interconnect_1
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic [4:0] m_arb_burstcount [2],
   input logic [24:0] m_arb_address [2],
   input logic [255:0] m_arb_writedata [2],
   input logic [31:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [255:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [24:0] mout_arb_address,
   output logic [255:0] mout_arb_writedata,
   output logic [31:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [255:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(256),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1),
            .NUM_READ_MASTERS(2),
            .NUM_WRITE_MASTERS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(32),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(32),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(256),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(256),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(32),
         .ID_W(1),
         .NUM_READ_MASTERS(2),
         .NUM_WRITE_MASTERS(2),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(256),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(32),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE hist_system_interconnect_2
/////////////////////////////////////////////////////////////////
module hist_system_interconnect_2
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [10:0] m_arb_address [1],
   input logic [127:0] m_arb_writedata [1],
   input logic [15:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [127:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [10:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE hist_system_interconnect_3
/////////////////////////////////////////////////////////////////
module hist_system_interconnect_3
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [10:0] m_arb_address [1],
   input logic [127:0] m_arb_writedata [1],
   input logic [15:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [127:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [10:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(11),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(11),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

